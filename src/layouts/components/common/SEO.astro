---
// Import site config
import { siteConfig } from '@config/site';

export interface Props {
  title?: string;
  description?: string;
  image?: string;
  article?: boolean;
  noindex?: boolean;
  canonical?: string;
  publishDate?: Date;
  modifiedDate?: Date;
  author?: {
    name: string;
    url?: string;
  };
  tags?: string[];
  categories?: string[];
  breadcrumbs?: Array<{ name: string; url: string }>;
  video?: {
    src: string;
    name?: string;
    description?: string;
    thumbnailUrl?: string;
    uploadDate?: Date;
    duration?: string;
  };
}

// Destructure props
const {
  title = siteConfig.name,
  description = siteConfig.description,
  image = siteConfig.defaultImage,
  article = false,
  noindex = false,
  canonical = Astro.url.pathname,
  publishDate,
  modifiedDate,
  author,
  tags,
  categories,
  breadcrumbs,
  video
} = Astro.props;

// Determine page type
const isTags = Astro.url.pathname.includes('/tags/');
const isCategories = Astro.url.pathname.includes('/categories/');
const isSearch = Astro.url.pathname.includes('/search');
const isPagination = Astro.url.pathname.includes('/page/');

// Final noindex logic
let shouldNoindex = noindex;

if (
  (isTags && siteConfig.noindex.tags) ||
  (isCategories && siteConfig.noindex.categories) ||
  isSearch ||
  isPagination
) {
  shouldNoindex = true;
}

// Format ISO dates
const publishISODate = publishDate ? new Date(publishDate).toISOString() : null;
const modifiedISODate = modifiedDate ? new Date(modifiedDate).toISOString() : publishISODate;

// Safe URL builder
const safeUrl = (path, base) => {
  try {
    return new URL(path, base).toString();
  } catch {
    return `${(base || siteConfig.url || '').replace(/\/$/, '')}/${path.replace(/^\//, '')}`;
  }
};

// Canonical URL
let canonicalURL;
try {
  canonicalURL = new URL(canonical, Astro.site || siteConfig.url).toString();
} catch {
  canonicalURL = `${(Astro.site || siteConfig.url || '').replace(/\/$/, '')}/${canonical.replace(/^\//, '')}`;
}

// Schema definitions
const websiteSchema = {
  "@context": "https://schema.org",
  "@type": "WebSite",
  name: siteConfig.name,
  url: siteConfig.url,
  description: siteConfig.description,
  potentialAction: {
    "@type": "SearchAction",
    target: {
      "@type": "EntryPoint",
      urlTemplate: `${siteConfig.url}/search?q={search_term_string}`
    },
    "query-input": "required name=search_term_string"
  }
};

const breadcrumbsSchema = breadcrumbs
  ? {
      "@context": "https://schema.org",
      "@type": "BreadcrumbList",
      itemListElement: breadcrumbs.map((item, index) => ({
        "@type": "ListItem",
        position: index + 1,
        name: item.name,
        item: safeUrl(item.url, Astro.site || siteConfig.url)
      }))
    }
  : null;

const videoSchema = video
  ? {
      "@context": "https://schema.org",
      "@type": "VideoObject",
      name: video.name || title,
      description: video.description || description,
      thumbnailUrl: video.thumbnailUrl || image,
      uploadDate: video.uploadDate ? new Date(video.uploadDate).toISOString() : publishISODate,
      duration: video.duration || "PT0M0S",
      contentUrl: video.src,
      embedUrl: video.src
    }
  : null;

let schema = websiteSchema;

if (article && publishISODate) {
  schema = {
    "@context": "https://schema.org",
    "@type": "Article",
    headline: title,
    description: description,
    image: safeUrl(image, Astro.site || siteConfig.url),
    datePublished: publishISODate,
    dateModified: modifiedISODate || publishISODate,
    author: author
      ? {
          "@type": "Person",
          name: author.name,
          url: author.url
        }
      : null,
    publisher: {
      "@type": "Organization",
      name: siteConfig.name,
      logo: {
        "@type": "ImageObject",
        url: safeUrl("/favicon.svg", Astro.site || siteConfig.url)
      }
    },
    mainEntityOfPage: {
      "@type": "WebPage",
      "@id": canonicalURL
    },
    keywords: tags?.join(", ") || ""
  };
} else if (video) {
  schema = videoSchema;
}
---
<!-- SEO Meta Tags -->
<title>{title}</title>
<meta name="description" content={description} />
<link rel="canonical" href={canonicalURL} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content={article ? "article" : "website"} />
<meta property="og:url" content={canonicalURL} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={safeUrl(image, Astro.site || siteConfig.url)} />

{article && publishISODate && <meta property="article:published_time" content={publishISODate} />}
{article && modifiedISODate && <meta property="article:modified_time" content={modifiedISODate} />}
{article &&
  tags &&
  tags.map((tag) => <meta property="article:tag" content={tag} />)}

<!-- Twitter -->
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:url" content={canonicalURL} />
<meta name="twitter:title" content={title} />
<meta name="twitter:description" content={description} />
<meta name="twitter:image" content={safeUrl(image, Astro.site || siteConfig.url)} />

<!-- Robots Meta -->
<meta name="robots" content={shouldNoindex ? "noindex, nofollow" : "index, follow"} />

<!-- RSS Feed -->
<link rel="alternate" type="application/rss+xml" title={`${siteConfig.name} RSS Feed`} href="/rss.xml" />

<!-- JSON-LD Schemas -->
<script type="application/ld+json" set:html={JSON.stringify(schema)} />
{breadcrumbsSchema && (
  <script type="application/ld+json" set:html={JSON.stringify(breadcrumbsSchema)} />
)}
{videoSchema && article && (
  <script type="application/ld+json" set:html={JSON.stringify(videoSchema)} />
)}
